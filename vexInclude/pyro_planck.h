/****************************************************************************
   Description:  Physical Color based on black-body temperature (in Kelvin)
   There are 2 models here:
      1. The function evalfireph() represents the old, pyro1 method, which
         uses lookup tables and a different tonemapping process.
      2. The function blackbody() is pyro2's approach, which uses analytic
         solutions to both chromaticity and intensity. Also uses a global
         version of the [Reinhard et al. 2002] tonemapping algorithm.

      All the pyro1 functions are currently disabled... until I figure out
      whether they should be removed entirely.

*****************************************************************************/

#ifndef pyro_planck_h__GUARD
#define pyro_planck_h__GUARD

#include <pyro_math.h>
#include <pyro_color.h>
#include <pyro_utils.h>

//============= Pyro1 Starts ==============
#if 0
// Temperature range of the lookup tables
#define BB_START 350  // Start temperatue in Kelvin
#define BB_END   15000    // End temperatue in Kelvin
#define BB_SAMPS 500   // Number of samples per table
#define BB_STEP  29.3587174349   // Step size per sample (in Kelvin)



// ------------------------------------------------------------------------
// vector blackbodyhue(float temp)
// Returns the hue (as an RGB triplet) emitted by a black body at
// temperature 'temp'.
// ------------------------------------------------------------------------

vector blackbodyhue(float kelvin) {
   vector data[] = {
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0,0}, 
      {1,0,0}, {1,0.000376664165,0}, 
      {1,0.00732424544,0}, {1,0.0143382643,0}, 
      {1,0.0214118137,0}, {1,0.0285384697,0}, 
      {1,0.03571225,0}, {1,0.0429275774,0}, 
      {1,0.0501792469,0}, {1,0.0574623965,0}, 
      {1,0.0647724809,0}, {1,0.0721052476,0}, 
      {1,0.0794567159,0}, {1,0.0868231565,0}, 
      {1,0.0942010746,0}, {1,0.101587193,0}, 
      {1,0.108978437,0}, {1,0.116371923,0}, 
      {1,0.123764941,0}, {1,0.13115495,0}, 
      {1,0.138539561,0}, {1,0.14591653,0}, 
      {1,0.153283751,0}, {1,0.160639244,0}, 
      {1,0.167981147,0}, {1,0.175307713,0}, 
      {1,0.1826173,0}, {1,0.189908366,0}, 
      {1,0.197179461,0}, {1,0.204429224,0}, 
      {1,0.211656378,0}, {1,0.218859725,0}, 
      {1,0.226038139,0}, {1,0.233190567,0.000190538246}, 
      {1,0.240316018,0.00245063476}, {1,0.247413567,0.00482247069}, 
      {1,0.254482346,0.00730573244}, {1,0.261521545,0.00990000324}, 
      {1,0.268530404,0.012604769}, {1,0.275508215,0.0154194242}, 
      {1,0.282454317,0.0183432773}, {1,0.289368094,0.0213755564}, 
      {1,0.296248971,0.0245154143}, {1,0.303096416,0.0277619336}, 
      {1,0.309909931,0.0311141318}, {1,0.316689059,0.0345709652}, 
      {1,0.323433373,0.0381313344}, {1,0.330142481,0.0417940879}, 
      {1,0.336816021,0.0455580262}, {1,0.343453661,0.0494219061}, 
      {1,0.350055095,0.0533844441}, {1,0.356620045,0.0574443199}, 
      {1,0.363148256,0.0616001803}, {1,0.3696395,0.0658506414}, 
      {1,0.376093569,0.0701942929}, {1,0.382510276,0.0746297}, 
      {1,0.388889455,0.0791554065}, {1,0.39523096,0.0837699373}, 
      {1,0.401534663,0.0884718013}, {1,0.407800453,0.0932594929}, 
      {1,0.414028235,0.0981314948}, {1,0.420217931,0.10308628}, 
      {1,0.426369476,0.108122313}, {1,0.432482821,0.113238054}, 
      {1,0.43855793,0.118431956}, {1,0.44459478,0.123702472}, 
      {1,0.450593358,0.129048053}, {1,0.456553665,0.134467149}, 
      {1,0.462475713,0.139958213}, {1,0.468359522,0.145519701}, 
      {1,0.474205125,0.151150072}, {1,0.480012563,0.15684779}, 
      {1,0.485781886,0.162611326}, {1,0.491513151,0.168439158}, 
      {1,0.497206426,0.174329772}, {1,0.502861785,0.180281662}, 
      {1,0.508479309,0.186293331}, {1,0.514059088,0.192363295}, 
      {1,0.519601216,0.198490079}, {1,0.525105794,0.20467222}, 
      {1,0.530572932,0.210908266}, {1,0.53600274,0.21719678}, 
      {1,0.541395339,0.223536336}, {1,0.546750851,0.229925522}, 
      {1,0.552069407,0.236362941}, {1,0.557351137,0.242847209}, 
      {1,0.562596181,0.249376958}, {1,0.56780468,0.255950835}, 
      {1,0.57297678,0.2625675}, {1,0.578112631,0.26922563}, 
      {1,0.583212385,0.275923919}, {1,0.588276199,0.282661076}, 
      {1,0.593304232,0.289435824}, {1,0.598296649,0.296246905}, 
      {1,0.603253613,0.303093077}, {1,0.608175294,0.309973113}, 
      {1,0.613061862,0.316885803}, {1,0.61791349,0.323829955}, 
      {1,0.622730355,0.330804392}, {1,0.627512634,0.337807955}, 
      {1,0.632260507,0.344839501}, {1,0.636974156,0.351897904}, 
      {1,0.641653763,0.358982055}, {1,0.646299515,0.36609086}, 
      {1,0.650911598,0.373223245}, {1,0.655490201,0.38037815}, 
      {1,0.660035513,0.387554533}, {1,0.664547724,0.394751368}, 
      {1,0.669027028,0.401967646}, {1,0.673473617,0.409202373}, 
      {1,0.677887686,0.416454574}, {1,0.682269429,0.423723288}, 
      {1,0.686619044,0.431007571}, {1,0.690936726,0.438306495}, 
      {1,0.695222673,0.44561915}, {1,0.699477083,0.452944638}, 
      {1,0.703700156,0.460282079}, {1,0.70789209,0.46763061}, 
      {1,0.712053086,0.474989381}, {1,0.716183342,0.482357559}, 
      {1,0.72028306,0.489734325}, {1,0.72435244,0.497118876}, 
      {1,0.728391683,0.504510425}, {1,0.73240099,0.511908198}, 
      {1,0.736380563,0.519311437}, {1,0.740330601,0.526719397}, 
      {1,0.744251307,0.534131349}, {1,0.748142882,0.541546578}, 
      {1,0.752005526,0.548964383}, {1,0.755839441,0.556384077}, 
      {1,0.759644828,0.563804986}, {1,0.763421886,0.571226451}, 
      {1,0.767170816,0.578647824}, {1,0.770891818,0.586068475}, 
      {1,0.774585091,0.593487782}, {1,0.778250836,0.600905139}, 
      {1,0.78188925,0.608319953}, {1,0.785500533,0.615731641}, 
      {1,0.789084882,0.623139636}, {1,0.792642494,0.630543381}, 
      {1,0.796173567,0.637942332}, {1,0.799678297,0.645335957}, 
      {1,0.80315688,0.652723735}, {1,0.806609511,0.660105159}, 
      {1,0.810036385,0.66747973}, {1,0.813437695,0.674846965}, 
      {1,0.816813635,0.682206387}, {1,0.820164397,0.689557535}, 
      {1,0.823490173,0.696899955}, {1,0.826791154,0.704233206}, 
      {1,0.83006753,0.711556856}, {1,0.833319492,0.718870485}, 
      {1,0.836547227,0.726173683}, {1,0.839750923,0.73346605}, 
      {1,0.842930767,0.740747194}, {1,0.846086946,0.748016735}, 
      {1,0.849219645,0.755274302}, {1,0.852329047,0.762519535}, 
      {1,0.855415337,0.76975208}, {1,0.858478697,0.776971594}, 
      {1,0.861519309,0.784177744}, {1,0.864537353,0.791370205}, 
      {1,0.867533008,0.79854866}, {1,0.870506455,0.805712802}, 
      {1,0.873457869,0.812862332}, {1,0.876387429,0.819996957}, 
      {1,0.879295309,0.827116396}, {1,0.882181685,0.834220374}, 
      {1,0.88504673,0.841308624}, {1,0.887890617,0.848380886}, 
      {1,0.890713517,0.85543691}, {1,0.893515601,0.86247645}, 
      {1,0.896297039,0.869499271}, {1,0.899057999,0.876505143}, 
      {1,0.901798648,0.883493843}, {1,0.904519152,0.890465156}, 
      {1,0.907219678,0.897418874}, {1,0.909900389,0.904354793}, 
      {1,0.912561448,0.911272719}, {1,0.915203017,0.918172464}, 
      {1,0.917825257,0.925053843}, {1,0.920428328,0.931916682}, 
      {1,0.923012389,0.938760809}, {1,0.925577597,0.94558606}, 
      {1,0.928124109,0.952392277}, {1,0.930652081,0.959179308}, 
      {1,0.933161665,0.965947004}, {1,0.935653017,0.972695225}, 
      {1,0.938126288,0.979423835}, {1,0.940581628,0.986132702}, 
      {1,0.943019188,0.992821701}, {1,0.945439117,0.999490712}, 
      {0.993897846,0.942057687,1}, {0.987392664,0.938246843,1}, 
      {0.980991636,0.934487323,1}, {0.974692468,0.930778143,1}, 
      {0.968492925,0.927118347,1}, {0.962390836,0.923506999,1}, 
      {0.956384091,0.919943187,1}, {0.950470636,0.916426023,1}, 
      {0.944648472,0.912954639,1}, {0.938915657,0.909528187,1}, 
      {0.9332703,0.906145842,1}, {0.927710559,0.902806797,1}, 
      {0.922234643,0.899510263,1}, {0.916840808,0.896255473,1}, 
      {0.911527355,0.893041674,1}, {0.906292631,0.889868135,1}, 
      {0.901135024,0.886734138,1}, {0.896052966,0.883638983,1}, 
      {0.891044927,0.880581986,1}, {0.886109417,0.87756248,1}, 
      {0.881244986,0.874579812,1}, {0.876450218,0.871633342,1}, 
      {0.871723734,0.868722448,1}, {0.867064188,0.865846519,1}, 
      {0.86247027,0.863004958,1}, {0.857940701,0.860197183,1}, 
      {0.853474233,0.857422623,1}, {0.849069651,0.854680721,1}, 
      {0.844725766,0.851970929,1}, {0.840441422,0.849292715,1}, 
      {0.836215487,0.846645555,1}, {0.832046859,0.844028939,1}, 
      {0.827934461,0.841442367,1}, {0.823877242,0.838885348,1}, 
      {0.819874177,0.836357402,1}, {0.815924262,0.833858062,1}, 
      {0.812026521,0.831386867,1}, {0.808179996,0.828943367,1}, 
      {0.804383755,0.826527121,1}, {0.800636886,0.824137698,1}, 
      {0.796938498,0.821774676,1}, {0.793287719,0.81943764,1}, 
      {0.789683701,0.817126184,1}, {0.78612561,0.814839912,1}, 
      {0.782612634,0.812578432,1}, {0.779143979,0.810341365,1}, 
      {0.775718868,0.808128335,1}, {0.772336542,0.805938976,1}, 
      {0.768996257,0.803772929,1}, {0.765697288,0.80162984,1}, 
      {0.762438923,0.799509366,1}, {0.759220469,0.797411166,1}, 
      {0.756041244,0.795334909,1}, {0.752900585,0.793280269,1}, 
      {0.749797839,0.791246926,1}, {0.746732371,0.789234568,1}, 
      {0.743703557,0.787242885,1}, {0.740710786,0.785271578,1}, 
      {0.737753462,0.78332035,1}, {0.734830999,0.78138891,1}, 
      {0.731942826,0.779476974,1}, {0.729088382,0.777584261,1}, 
      {0.726267118,0.775710498,1}, {0.723478496,0.773855416,1}, 
      {0.72072199,0.772018749,1}, {0.717997085,0.770200238,1}, 
      {0.715303275,0.768399628,1}, {0.712640065,0.766616669,1}, 
      {0.71000697,0.764851115,1}, {0.707403516,0.763102725,1}, 
      {0.704829236,0.761371262,1}, {0.702283675,0.759656494,1}, 
      {0.699766384,0.75795819,1}, {0.697276926,0.756276128,1}, 
      {0.694814871,0.754610086,1}, {0.692379798,0.752959848,1}, 
      {0.689971293,0.7513252,1}, {0.687588951,0.749705934,1}, 
      {0.685232376,0.748101843,1}, {0.682901177,0.746512727,1}, 
      {0.680594973,0.744938385,1}, {0.678313388,0.743378623,1}, 
      {0.676056056,0.74183325,1}, {0.673822616,0.740302076,1}, 
      {0.671612713,0.738784916,1}, {0.669426001,0.737281588,1}, 
      {0.667262139,0.735791912,1}, {0.665120793,0.734315713,1}, 
      {0.663001635,0.732852817,1}, {0.660904343,0.731403054,1}, 
      {0.658828601,0.729966256,1}, {0.656774098,0.728542258,1}, 
      {0.654740531,0.727130899,1}, {0.6527276,0.725732018,1}, 
      {0.650735012,0.724345459,1}, {0.648762478,0.722971068,1}, 
      {0.646809716,0.721608693,1}, {0.644876447,0.720258184,1}, 
      {0.642962399,0.718919394,1}, {0.641067304,0.717592179,1}, 
      {0.639190898,0.716276397,1}, {0.637332923,0.714971907,1}, 
      {0.635493125,0.713678572,1}, {0.633671253,0.712396255,1}, 
      {0.631867064,0.711124824,1}, {0.630080314,0.709864147,1}, 
      {0.628310769,0.708614094,1}, {0.626558195,0.707374538,1}, 
      {0.624822364,0.706145355,1}, {0.623103051,0.704926419,1}, 
      {0.621400034,0.70371761,1}, {0.619713097,0.702518807,1}, 
      {0.618042026,0.701329894,1}, {0.616386612,0.700150754,1}, 
      {0.614746648,0.698981272,1}, {0.613121932,0.697821336,1}, 
      {0.611512263,0.696670835,1}, {0.609917446,0.69552966,1}, 
      {0.608337287,0.694397703,1}, {0.606771599,0.693274858,1}, 
      {0.605220192,0.692161021,1}, {0.603682885,0.691056088,1}, 
      {0.602159497,0.689959959,1}, {0.60064985,0.688872533,1}, 
      {0.59915377,0.687793712,1}, {0.597671085,0.6867234,1}, 
      {0.596201626,0.685661499,1}, {0.594745226,0.684607917,1}, 
      {0.593301722,0.683562561,1}, {0.591870954,0.682525338,1}, 
      {0.590452762,0.681496159,1}, {0.58904699,0.680474935,1}, 
      {0.587653486,0.679461578,1}, {0.586272098,0.678456002,1}, 
      {0.584902678,0.677458121,1}, {0.583545079,0.676467853,1}, 
      {0.582199157,0.675485113,1}, {0.58086477,0.674509821,1}, 
      {0.57954178,0.673541895,1}, {0.578230048,0.672581257,1}, 
      {0.576929439,0.671627828,1}, {0.575639819,0.670681532,1}, 
      {0.574361059,0.669742291,1}, {0.573093028,0.668810032,1}, 
      {0.571835599,0.667884679,1}, {0.570588647,0.666966161,1}, 
      {0.569352049,0.666054404,1}, {0.568125683,0.665149339,1}, 
      {0.566909429,0.664250894,1}, {0.565703169,0.663359001,1}, 
      {0.564506787,0.662473592,1}, {0.56332017,0.661594599,1}, 
      {0.562143203,0.660721956,1}, {0.560975776,0.659855598,1}, 
      {0.55981778,0.658995459,1}, {0.558669106,0.658141477,1}, 
      {0.557529649,0.657293588,1}, {0.556399304,0.65645173,1}, 
      {0.555277967,0.655615842,1}, {0.554165536,0.654785863,1}, 
      {0.553061913,0.653961734,1}, {0.551966997,0.653143396,1}, 
      {0.550880691,0.652330791,1}, {0.5498029,0.651523862,1}, 
      {0.548733529,0.650722551,1}, {0.547672485,0.649926802,1}, 
      {0.546619675,0.649136562,1}, {0.545575009,0.648351775,1}, 
      {0.544538398,0.647572387,1}, {0.543509754,0.646798346,1}, 
      {0.54248899,0.646029598,1}, {0.541476019,0.645266093,1}, 
      {0.540470758,0.644507778,1}, {0.539473124,0.643754605,1}, 
      {0.538483034,0.643006522,1}, {0.537500407,0.642263481,1}, 
      {0.536525164,0.641525432,1}, {0.535557225,0.640792329,1}, 
      {0.534596514,0.640064124,1}, {0.533642952,0.639340769,1}, 
      {0.532696465,0.638622219,1}, {0.531756978,0.637908428,1}, 
      {0.530824418,0.63719935,1}, {0.529898712,0.636494942,1}, 
      {0.528979788,0.63579516,1}, {0.528067576,0.635099959,1}, 
      {0.527162005,0.634409297,1}, {0.526263008,0.633723132,1}, 
      {0.525370517,0.633041421,1}, {0.524484464,0.632364123,1}, 
      {0.523604783,0.631691198,1}, {0.522731409,0.631022605,1}, 
      {0.521864278,0.630358303,1}, {0.521003326,0.629698255,1}, 
      {0.520148491,0.629042419,1}, {0.519299711,0.628390759,1}, 
      {0.518456924,0.627743236,1}, {0.517620071,0.627099812,1}, 
      {0.516789092,0.62646045,1}, {0.515963928,0.625825113,1}, 
      {0.515144521,0.625193766,1}, {0.514330814,0.624566372,1}, 
      {0.513522751,0.623942896,1}, {0.512720276,0.623323302,1}, 
      {0.511923333,0.622707556,1}, {0.511131869,0.622095624,1}, 
      {0.510345829,0.621487472,1}, {0.509565161,0.620883066,1}, 
      {0.508789812,0.620282374,1}, {0.50801973,0.619685363,1}, 
      {0.507254866,0.619091999,1}, {0.506495167,0.618502252,1}, 
      {0.505740585,0.61791609,1}, {0.50499107,0.617333481,1}, 
      {0.504246573,0.616754395,1}, {0.503507048,0.6161788,1}, 
      {0.502772445,0.615606668,1}, {0.502042719,0.615037967,1}, 
      {0.501317824,0.614472669,1}, {0.500597713,0.613910744,1}, 
      {0.499882342,0.613352164,1}, {0.499171666,0.612796899,1}, 
      {0.49846564,0.612244921,1}, {0.497764223,0.611696203,1}, 
      {0.497067369,0.611150717,1}, {0.496375038,0.610608436,1}, 
      {0.495687187,0.610069332,1}, {0.495003775,0.609533379,1}, 
      {0.494324761,0.60900055,1}, {0.493650104,0.608470819,1}, 
      {0.492979764,0.607944161,1}, {0.492313703,0.60742055,1}, 
      {0.49165188,0.60689996,1}, {0.490994257,0.606382366,1}, 
      {0.490340797,0.605867744,1}, {0.48969146,0.605356069,1}, 
      {0.489046212,0.604847317,1}, {0.488405013,0.604341463,1}, 
      {0.487767828,0.603838485,1}, {0.487134622,0.603338359,1}, 
      {0.486505358,0.60284106,1}, {0.485880001,0.602346568,1}, 
      {0.485258517,0.601854857,1}, {0.484640871,0.601365907,1}, 
      {0.48402703,0.600879695,1}, {0.483416959,0.600396199,1}, 
      {0.482810626,0.599915396,1}, {0.482207997,0.599437266,1}, 
      {0.481609041,0.598961787,1}, {0.481013726,0.598488938,1}, 
      {0.480422018,0.598018698,1}, {0.479833888,0.597551046,1}, 
      {0.479249305,0.597085962,1}, {0.478668237,0.596623425,1}, 
      {0.478090654,0.596163416,1}, {0.477516526,0.595705914,1}, 
      {0.476945825,0.5952509,1}, {0.476378519,0.594798355,1}, 
      {0.475814581,0.594348258,1}, {0.475253982,0.593900592,1}, 
      {0.474696693,0.593455337,1}, {0.474142686,0.593012474,1}, 
      {0.473591934,0.592571985,1}, {0.473044408,0.592133852,1}, 
      {0.472500083,0.591698056,1}, {0.471958931,0.59126458,1}, 
      {0.471420926,0.590833405,1}, {0.470886041,0.590404515,1}, 
      {0.47035425,0.589977891,1}, {0.469825528,0.589553516,1}, 
      {0.46929985,0.589131374,1}, {0.468777189,0.588711448,1}, 
      {0.468257521,0.58829372,1}, {0.467740822,0.587878174,1}, 
      {0.467227067,0.587464794,1}, {0.466716233,0.587053563,1}, 
      {0.466208294,0.586644465,1}, {0.465703228,0.586237485,1}, 
      {0.465201012,0.585832607,1}, {0.464701621,0.585429814,1}, 
      {0.464205034,0.585029091,1}, {0.463711228,0.584630424,1}, 
      {0.46322018,0.584233797,1}, {0.462731868,0.583839194,1}, 
      {0.46224627,0.583446601,1}, {0.461763365,0.583056003,1}, 
      {0.461283131,0.582667386,1}, {0.460805547,0.582280735,1}, 
      {0.460330592,0.581896035,1}, {0.459858244,0.581513273,1}
   };

   vector out = 0;

   if(kelvin<=BB_START) {
      out = data[0];
   } else if(kelvin>=BB_END) {
      out = data[BB_SAMPS-1];
   } else {
      float sf = fit(kelvin,BB_START,BB_END,0,BB_SAMPS);
      int   si = floor(sf);
      out = lerp(data[si],data[si+1],sf-(float)si);
   }

   return out;
}



// ------------------------------------------------------------------------
// vector blackbodytmval(float temp)
// Returns the tone mapped (log-based) intensity emitted by a black body at
// temperature 'temp'. Temp to intensity: [350,15000]->[0,1]
// ------------------------------------------------------------------------

float blackbodytmval(float kelvin) {
   float data[] = {
      0, 0, 0, 0, 4.33889032e-17, 
      6.21907613e-16, 7.04346529e-15, 6.26680392e-14, 4.55409928e-13, 2.77629682e-12, 
      1.45166832e-11, 6.63310027e-11, 2.6907958e-10, 9.82210981e-10, 3.26355832e-09, 
      9.96884445e-09, 2.82349678e-08, 7.47055813e-08, 1.85851088e-07, 4.3721811e-07, 
      9.77530201e-07, 2.08898693e-06, 4.37268101e-06, 8.79976155e-06, 1.70785336e-05, 
      3.2054452e-05, 5.83253732e-05, 0.000103113463, 0.000177464755, 0.000297849359, 
      0.000488224156, 0.000782584115, 0.00122795046, 0.00188760051, 0.00284411073, 
      0.00420145328, 0.00608499853, 0.00863797392, 0.0120129923, 0.0163580496, 
      0.0217981017, 0.0284156056, 0.0362351365, 0.0452169783, 0.055261946, 
      0.0662258092, 0.0779387036, 0.0902242871, 0.10291488, 0.115861105, 
      0.128936398, 0.142037687, 0.155083715, 0.168014381, 0.18080472, 
      0.193398467, 0.205771758, 0.217908574, 0.229798902, 0.241437283, 
      0.252821672, 0.263952563, 0.274832312, 0.285464625, 0.295854164, 
      0.306006257, 0.315926668, 0.325621431, 0.335096727, 0.344358784, 
      0.353413813, 0.362267954, 0.37092724, 0.379397568, 0.387684686, 
      0.395794176, 0.403731453, 0.411501753, 0.419110141, 0.426561503, 
      0.433860558, 0.441011854, 0.448019775, 0.454888546, 0.461622238, 
      0.468224773, 0.474699928, 0.481051345, 0.48728253, 0.493396863, 
      0.499397601, 0.505287885, 0.511070741, 0.51674909, 0.522325746, 
      0.527803426, 0.533184753, 0.538472257, 0.543668381, 0.548775484, 
      0.553795847, 0.558731672, 0.563585087, 0.568358152, 0.573052855, 
      0.577671123, 0.582214818, 0.586685742, 0.59108564, 0.595416203, 
      0.599679066, 0.603875815, 0.608007986, 0.612077068, 0.616084504, 
      0.620031694, 0.623919995, 0.627750726, 0.631525162, 0.635244546, 
      0.638910081, 0.642522937, 0.646084249, 0.649595121, 0.653056625, 
      0.656469802, 0.659835665, 0.663155198, 0.66642936, 0.669659082, 
      0.672845268, 0.675988802, 0.67909054, 0.682151318, 0.685171948, 
      0.688153223, 0.691095913, 0.694000768, 0.696868522, 0.699699886, 
      0.702495555, 0.705256207, 0.707982502, 0.710675083, 0.713334579, 
      0.715961601, 0.718556748, 0.721120602, 0.723653731, 0.726156692, 
      0.728630025, 0.73107426, 0.733489914, 0.73587749, 0.738237482, 
      0.740570371, 0.742876627, 0.745156709, 0.747411066, 0.749640137, 
      0.751844352, 0.754024129, 0.756179878, 0.758312, 0.760420888, 
      0.762506924, 0.764570485, 0.766611937, 0.768631638, 0.770629942, 
      0.772607191, 0.774563722, 0.776499865, 0.778415943, 0.780312271, 
      0.782189159, 0.78404691, 0.78588582, 0.787706181, 0.789508277, 
      0.791292387, 0.793058784, 0.794807738, 0.796539509, 0.798254356, 
      0.799952531, 0.801634281, 0.803299849, 0.804949473, 0.806583386, 
      0.808201817, 0.809804989, 0.811393124, 0.812966436, 0.814525138, 
      0.816069438, 0.81759954, 0.819115643, 0.820617945, 0.822106637, 
      0.82358191, 0.825043948, 0.826492935, 0.827929049, 0.829352467, 
      0.830763361, 0.8321619, 0.833548252, 0.834922579, 0.836285043, 
      0.837635801, 0.838975009, 0.839904136, 0.840792978, 0.841674809, 
      0.842549716, 0.843417789, 0.844279116, 0.84513378, 0.845981865, 
      0.846823456, 0.847658632, 0.848487473, 0.849310058, 0.850126465, 
      0.850936768, 0.851741043, 0.852539363, 0.853331801, 0.854118428, 
      0.854899313, 0.855674525, 0.856444133, 0.857208203, 0.857966801, 
      0.85871999, 0.859467836, 0.860210399, 0.860947743, 0.861679927, 
      0.862407012, 0.863129056, 0.863846116, 0.864558251, 0.865265515, 
      0.865967965, 0.866665655, 0.867358638, 0.868046968, 0.868730695, 
      0.869409872, 0.870084548, 0.870754774, 0.871420599, 0.87208207, 
      0.872739236, 0.873392142, 0.874040836, 0.874685362, 0.875325766, 
      0.875962092, 0.876594383, 0.877222682, 0.877847032, 0.878467473, 
      0.879084048, 0.879696796, 0.880305759, 0.880910974, 0.881512481, 
      0.882110318, 0.882704523, 0.883295133, 0.883882185, 0.884465714, 
      0.885045758, 0.88562235, 0.886195526, 0.88676532, 0.887331766, 
      0.887894897, 0.888454745, 0.889011344, 0.889564725, 0.89011492, 
      0.89066196, 0.891205876, 0.891746699, 0.892284457, 0.892819181, 
      0.893350899, 0.893879642, 0.894405436, 0.89492831, 0.895448292, 
      0.895965409, 0.896479688, 0.896991155, 0.897499837, 0.89800576, 
      0.89850895, 0.899009431, 0.899507228, 0.900002367, 0.900494872, 
      0.900984766, 0.901472074, 0.901956819, 0.902439023, 0.902918711, 
      0.903395904, 0.903870625, 0.904342896, 0.904812738, 0.905280173, 
      0.905745223, 0.906207908, 0.906668249, 0.907126267, 0.907581982, 
      0.908035413, 0.908486581, 0.908935505, 0.909382204, 0.909826698, 
      0.910269005, 0.910709144, 0.911147134, 0.911582992, 0.912016736, 
      0.912448385, 0.912877955, 0.913305465, 0.913730931, 0.91415437, 
      0.9145758, 0.914995236, 0.915412695, 0.915828194, 0.916241748, 
      0.916653373, 0.917063085, 0.917470899, 0.91787683, 0.918280895, 
      0.918683107, 0.919083482, 0.919482034, 0.919878778, 0.920273728, 
      0.920666898, 0.921058302, 0.921447955, 0.921835869, 0.922222059, 
      0.922606537, 0.922989318, 0.923370413, 0.923749837, 0.924127602, 
      0.924503721, 0.924878207, 0.925251071, 0.925622326, 0.925991985, 
      0.926360059, 0.92672656, 0.927091501, 0.927454892, 0.927816746, 
      0.928177074, 0.928535887, 0.928893196, 0.929249013, 0.929603348, 
      0.929956213, 0.930307617, 0.930657573, 0.93100609, 0.931353179, 
      0.93169885, 0.932043113, 0.932385978, 0.932727456, 0.933067557, 
      0.93340629, 0.933743664, 0.934079691, 0.934414378, 0.934747736, 
      0.935079774, 0.935410501, 0.935739927, 0.93606806, 0.936394909, 
      0.936720484, 0.937044793, 0.937367845, 0.937689648, 0.938010212, 
      0.938329544, 0.938647653, 0.938964547, 0.939280235, 0.939594725, 
      0.939908025, 0.940220142, 0.940531086, 0.940840862, 0.941149481, 
      0.941456948, 0.941763273, 0.942068462, 0.942372522, 0.942675462, 
      0.942977289, 0.94327801, 0.943577632, 0.943876162, 0.944173608, 
      0.944469976, 0.944765274, 0.945059509, 0.945352686, 0.945644814, 
      0.945935899, 0.946225947, 0.946514965, 0.94680296, 0.947089937, 
      0.947375905, 0.947660868, 0.947944833, 0.948227807, 0.948509796, 
      0.948790805, 0.949070842, 0.949349911, 0.94962802, 0.949905173, 
      0.950181377, 0.950456638, 0.950730961, 0.951004353, 0.951276818, 
      0.951548363, 0.951818993, 0.952088713, 0.95235753, 0.952625448, 
      0.952892474, 0.953158611, 0.953423867, 0.953688245, 0.953951751, 
      0.954214391, 0.95447617, 0.954737092, 0.954997162, 0.955256386, 
      0.955514769, 0.955772315, 0.95602903, 0.956284918, 0.956539985, 
      0.956794234, 0.95704767, 0.957300299, 0.957552125, 0.957803152, 
      0.958053386, 0.95830283, 0.958551489, 0.958799368, 0.959046471, 
      0.959292803, 0.959538367, 0.959783169, 0.960027212, 0.960270501, 
      0.960513039, 0.960754832, 0.960995883, 0.961236197, 0.961475777, 
      0.961714627, 0.961952753, 0.962190156, 0.962426843, 0.962662816, 
      0.962898079, 0.963132636, 0.963366492, 0.96359965, 0.963832113, 
      0.964063886, 0.964294972, 0.964525375, 0.964755099, 0.964984147, 
      0.965212522, 0.96544023
   };

   float out = 0;

   if(kelvin<=BB_START) {
      out = data[0];
   } else if(kelvin>=BB_END) {
      out = data[BB_SAMPS-1];
   } else {
      float sf = efit(kelvin,BB_START,BB_END,0,BB_SAMPS);
      int   si = floor(sf);
      out = lerp(data[si],data[si+1],sf-(float)si);
   }

   return out;
}



// ------------------------------------------------------------------------
// vector blackbodytmcdf(float temp)
// Returns the cumulative distribution function (CDF) of the tone mapped 
// intensity. Used for normalizing output intensities between different 
// subranges of the data. 
// ------------------------------------------------------------------------

float blackbodytmcdf(float kelvin) {
   float data[] = {
      0, 0, 0, 0, 4.33889032e-17, 
      6.65296516e-16, 7.70876181e-15, 7.0376801e-14, 5.25786729e-13, 3.30208355e-12, 
      1.78187668e-11, 8.41497695e-11, 3.5322935e-10, 1.33544033e-09, 4.59899865e-09, 
      1.45678431e-08, 4.28028109e-08, 1.17508392e-07, 3.0335948e-07, 7.4057759e-07, 
      1.71810779e-06, 3.80709472e-06, 8.17977573e-06, 1.69795373e-05, 3.40580709e-05, 
      6.61125229e-05, 0.000124437896, 0.000227551359, 0.000405016114, 0.000702865472, 
      0.00119108963, 0.00197367374, 0.00320162421, 0.00508922472, 0.00793333545, 
      0.0121347887, 0.0182197873, 0.0268577612, 0.0388707535, 0.0552288031, 
      0.0770269047, 0.10544251, 0.141677647, 0.186894625, 0.242156571, 
      0.30838238, 0.386321084, 0.476545371, 0.579460251, 0.695321356, 
      0.824257755, 0.966295442, 1.12137916, 1.28939354, 1.47019826, 
      1.66359672, 1.86936848, 2.08727706, 2.31707596, 2.55851324, 
      2.81133491, 3.07528748, 3.35011979, 3.63558441, 3.93143858, 
      4.23744484, 4.5533715, 4.87899293, 5.21408966, 5.55844844, 
      5.91186226, 6.27413021, 6.64505745, 7.02445502, 7.41213971, 
      7.80793388, 8.21166533, 8.62316709, 9.04227723, 9.46883873, 
      9.90269929, 10.3437111, 10.7917309, 11.2466195, 11.7082417, 
      12.1764665, 12.6511664, 13.1322178, 13.6195003, 14.1128971, 
      14.6122947, 15.1175826, 15.6286534, 16.1454025, 16.6677282, 
      17.1955316, 17.7287164, 18.2671886, 18.810857, 19.3596325, 
      19.9134284, 20.47216, 21.0357451, 21.6041033, 22.1771561, 
      22.7548272, 23.3370421, 23.9237278, 24.5148134, 25.1102296, 
      25.7099087, 26.3137845, 26.9217925, 27.5338696, 28.1499541, 
      28.7699858, 29.3939058, 30.0216565, 30.6531817, 31.2884262, 
      31.9273363, 32.5698592, 33.2159435, 33.8655386, 34.5185952, 
      35.175065, 35.8349007, 36.4980559, 37.1644852, 37.8341443, 
      38.5069896, 39.1829784, 39.8620689, 40.5442203, 41.2293922, 
      41.9175454, 42.6086413, 43.3026421, 43.9995106, 44.6992105, 
      45.4017061, 46.1069623, 46.8149448, 47.5256199, 48.2389544, 
      48.954916, 49.6734728, 50.3945934, 51.1182471, 51.8444038, 
      52.5730338, 53.3041081, 54.037598, 54.7734755, 55.511713, 
      56.2522834, 56.99516, 57.7403167, 58.4877278, 59.2373679, 
      59.9892123, 60.7432364, 61.4994163, 62.2577283, 63.0181491, 
      63.7806561, 64.5452266, 65.3118385, 66.0804701, 66.8511001, 
      67.6237073, 68.398271, 69.1747709, 69.9531868, 70.7334991, 
      71.5156882, 72.2997351, 73.085621, 73.8733271, 74.6628354, 
      75.4541278, 76.2471866, 77.0419943, 77.8385338, 78.6367882, 
      79.4367407, 80.238375, 81.0416748, 81.8466243, 82.6532077, 
      83.4614095, 84.2712145, 85.0826076, 85.8955741, 86.7100992, 
      87.5261686, 88.3437682, 89.1628838, 89.9835018, 90.8056084, 
      91.6291903, 92.4542343, 93.2807272, 94.1086563, 94.9380087, 
      95.7687721, 96.600934, 97.4344822, 98.2694048, 99.1056899, 
      99.9433257, 100.782301, 101.622205, 102.462998, 103.304673, 
      104.147222, 104.99064, 105.834919, 106.680053, 107.526035, 
      108.372858, 109.220517, 110.069004, 110.918314, 111.768441, 
      112.619378, 113.471119, 114.323658, 115.17699, 116.031108, 
      116.886008, 117.741682, 118.598126, 119.455335, 120.313301, 
      121.172021, 122.031489, 122.8917, 123.752647, 124.614327, 
      125.476734, 126.339863, 127.203709, 128.068268, 128.933533, 
      129.799501, 130.666167, 131.533525, 132.401572, 133.270303, 
      134.139713, 135.009798, 135.880552, 136.751973, 137.624055, 
      138.496794, 139.370186, 140.244227, 141.118913, 141.994238, 
      142.8702, 143.746795, 144.624017, 145.501864, 146.380332, 
      147.259416, 148.139113, 149.019419, 149.90033, 150.781842, 
      151.663952, 152.546657, 153.429952, 154.313834, 155.1983, 
      156.083346, 156.968968, 157.855164, 158.741929, 159.629261, 
      160.517156, 161.40561, 162.294622, 163.184186, 164.074301, 
      164.964963, 165.856169, 166.747916, 167.6402, 168.533019, 
      169.42637, 170.32025, 171.214655, 172.109584, 173.005032, 
      173.900997, 174.797477, 175.694468, 176.591968, 177.489974, 
      178.388483, 179.287492, 180.186999, 181.087002, 181.987497, 
      182.888481, 183.789954, 184.69191, 185.594349, 186.497268, 
      187.400664, 188.304535, 189.208878, 190.11369, 191.01897, 
      191.924716, 192.830924, 193.737592, 194.644718, 195.5523, 
      196.460335, 197.368822, 198.277758, 199.18714, 200.096966, 
      201.007235, 201.917945, 202.829092, 203.740675, 204.652691, 
      205.56514, 206.478018, 207.391323, 208.305054, 209.219209, 
      210.133784, 211.04878, 211.964192, 212.88002, 213.796262, 
      214.712916, 215.629979, 216.54745, 217.465326, 218.383607, 
      219.30229, 220.221374, 221.140856, 222.060735, 222.981008, 
      223.901675, 224.822734, 225.744182, 226.666017, 227.58824, 
      228.510846, 229.433835, 230.357206, 231.280956, 232.205083, 
      233.129587, 234.054465, 234.979716, 235.905339, 236.831331, 
      237.757691, 238.684417, 239.611509, 240.538964, 241.46678, 
      242.394957, 243.323493, 244.252386, 245.181635, 246.111239, 
      247.041195, 247.971503, 248.90216, 249.833166, 250.764519, 
      251.696218, 252.628261, 253.560647, 254.493375, 255.426442, 
      256.359849, 257.293592, 258.227672, 259.162086, 260.096834, 
      261.031914, 261.967324, 262.903064, 263.839132, 264.775527, 
      265.712248, 266.649293, 267.58666, 268.52435, 269.46236, 
      270.40069, 271.339338, 272.278302, 273.217582, 274.157177, 
      275.097085, 276.037305, 276.977836, 277.918677, 278.859827, 
      279.801284, 280.743047, 281.685115, 282.627488, 283.570163, 
      284.513141, 285.456419, 286.399996, 287.343872, 288.288046, 
      289.232516, 290.177281, 291.122341, 292.067693, 293.013338, 
      293.959274, 294.9055, 295.852015, 296.798818, 297.745908, 
      298.693284, 299.640945, 300.58889, 301.537117, 302.485627, 
      303.434418, 304.383489, 305.332839, 306.282467, 307.232372, 
      308.182553, 309.13301, 310.083741, 311.034745, 311.986022, 
      312.93757, 313.889389, 314.841478, 315.793836, 316.746461, 
      317.699354, 318.652512, 319.605936, 320.559624, 321.513576, 
      322.46779, 323.422267, 324.377004, 325.332001, 326.287257, 
      327.242772, 328.198544, 329.154573, 330.110858, 331.067398, 
      332.024193, 332.98124, 333.938541, 334.896093, 335.853896, 
      336.811949, 337.770252, 338.728803, 339.687603, 340.646649, 
      341.605942, 342.565481, 343.525264, 344.485291, 345.445561, 
      346.406074, 347.366829, 348.327825, 349.289061, 350.250537, 
      351.212252, 352.174204, 353.136395, 354.098821, 355.061484, 
      356.024382, 356.987515, 357.950882, 358.914481, 359.878313, 
      360.842377, 361.806672, 362.771198, 363.735953, 364.700937, 
      365.666149, 366.63159
   };

   float out = 0;

   if(kelvin<=BB_START) {
      out = data[0];
   } else if(kelvin>=BB_END) {
      out = data[BB_SAMPS-1];
   } else {
      float sf = efit(kelvin,BB_START,BB_END,0,BB_SAMPS);
      int   si = floor(sf);
      out = lerp(data[si],data[si+1],sf-(float)si);
   }
   return out;
}


// Black body intensity correction against a reference output used during
// calibration.
float bbadjust (
      float tstart;  // start temperature of current output range
      float tend;    // end temperature of current output range
   )
{
   float kcurr = (blackbodytmcdf(tend)-blackbodytmcdf(tstart));
   if(tend>BB_END) kcurr += (tend-BB_END) / BB_STEP;
   return   12.0 * blackbodytmcdf(4000) / kcurr; //blackbodytmcdf(tend);
}



// Evaluate fire color using the physical model
#define TEMP_START 400
void evalfireph(float bfield,btemp,bkcool,bbshift;
                int tksoft; float ksofte, ksoftk;
                export vector bc;
                export float  bk )
{
   float bbt = efit(max(0,bfield),0,1,TEMP_START,btemp);
   bk  = pow(blackbodytmval(bbt),1.0/max(1e-6,1.0+bkcool));
   if(bbshift>0) {
      float btmid = btemp - ((btemp-TEMP_START)*.3);
      bbt += lerp(0,bbshift*5000,smooth(btmid,btemp,bbt));
   }
   float  bbscale = bbadjust(TEMP_START,btemp);
   bc  = blackbodyhue(bbt);
   bk *= bbscale;
   if(tksoft && ksoftk>0) bc = softclipv(bc,ksofte,ksoftk);
}

//============= Pyro1 Ends ==============
#endif







//============= Pyro2 Starts ==============

#define PLANCK_C  2.99792458e+08  // Speed of light (m/s)
#define PLANCK_H  6.62606896e-34  // Planck's constant (J/s)
#define PLANCK_K  1.38064880e-23  // Boltzmann's constant (J/K)
#define PLANCK_S  5.67037321e-8   // Stefan-Boltzmann constant (W/m^2)
#define PLANCK_c1 3.74177e-16     // 2 * PI * PLANCK_H * PLANCK_C^2
#define PLANCK_c2 0.0143878       // (PLANCK_H * PLANCK_C) / PLANCK_K
#define PLANCK_a5 4.965114231744  // Solution to x = 5 * (1 - e^-x)


// Calculate a very close approxumation to the chromaticity (hue) of a
// blackbody emitter at the given temperature 'T' (in Kelvin).
// This version is an approximation using 3 cubic splines. Not the
// exact result, but many times faster to compute, so it's the default.
// The result is in linear color space(!!) and is modified to have equal 
// luminance across the entire output range.
vector bbspline(float T) {
   float  Tfirst = 1667;
   float  Tlast  = 25000;

   vector xyz = 0;
   if(T<Tfirst) {
      xyz = lerp({0.73469, 0.26531, 3.92832e-21},
                 {0.564639, 0.402887, 0.0324743}, fit(T,0,Tfirst,0,1));
   } else if(T>Tlast) {
      xyz = lerp({0.252473, 0.252255, 0.495272},
                 {0.238815, 0.239092, 0.522093}, fit(T,Tlast,1e6,0,1));
   } else {
      float x, y;
      float c1 = 1e9 / (T * T * T);
      float c2 = 1e6 / (T * T);
      float c3 = 1e3 / T; 
      if(T >= 1667 && T <= 4000) { 
         x = -0.2661239 * c1 - 0.2343580 * c2 + 0.8776956 * c3 + 0.179910; 
      } else if(T > 4000 && T <= 25000) { 
         x = -3.0258469 * c1 + 2.1070379 * c2 + 0.2226347 * c3 + 0.240390; 
      } 
      float x3 = x*x*x, x2 = x*x; 
      if(T >= 1667 && T <= 2222) { 
         y = -1.1063814 * x3 - 1.34811020 * x2 + 2.18555832 * x - 0.20219683; 
      } else if(T > 2222 && T <= 4000) { 
         y = -0.9549476 * x3 - 1.37418593 * x2 + 2.09137015 * x - 0.16748867; 
      } else if(T > 4000 && T <= 25000) { 
         y = +3.0817580 * x3 - 5.87338670 * x2 + 3.75112997 * x - 0.37001483; 
      }
      xyz = set(x, y, 1-x-y);
   }
   return xyz;
}

// Plank's law modified to units of (W/m^2/sr/nm)
float planck(float T, wl) {
   float wl5 = wl*wl*wl*wl*wl;
   float den;
   if(T<344) den = 6e49;
      else den = exp(1.4387768275291327e7/(T*wl));
   return 1.191042758493456e20 / (wl5 * (den - 1.0));
}

// Returns the wavelength (in nm) with highest radiant power (W/nm^2) at the
// given temperature T -- the wavelength with the peak output.
// The actual function is (10^9*PLANCK_H*PLANCK_C) / (PLANCK_a5*PLANCK_K*T),
// but here all the constants were collapsed to a single factor.
float planckpeak(float T) {
   return 2.89777e6 / T;
}

// The total spectral radiant power (W/m^2) for a surface (i.e: total 
// hemispherical emittance incl. Lambert's cos term) at temperature T  
// for lambda in (0,+inf].
float planckpower(float T) {
   return PLANCK_S * T*T*T*T;
}

// The total spectral radiant power (W/m^2) for a band of temperatures [T1,T2]
float planckbandpower(float T1,T2) {
   return PLANCK_S * (T2*T2*T2*T2*T2 - T1*T1*T1*T1*T1) / 5.0;
}

// Average spectral radiant power (W/m^2) for a band of temperatures [T1,T2]
float planckbandpoweravg(float T1,T2) {
   return planckbandpower(T1,T2) / (T2 - T1);
}

// Total log spectral radiant power log(W/m^2) for a band of temperatures [T1,T2]
float planckbandlogpower(float T1,T2) {
   return 4.0*T2*log(T2) - 4.0*T1*log(T1) - (T1-T2)*(log(PLANCK_S)-4.0);
}

// Average log spectral radiant power log(W/m^2) for a band of temperatures [T1,T2]
float planckbandlogpoweravg(float T1,T2) {
   return ( (4.0*T1*log(T1) - 4.0*T2*log(T2) ) / (T1-T2)) - 4.0 + log(PLANCK_S);
}

vector blackbodynm(float tempkelvin; export float norm) {
   float  bb;
   int    i;
   float  T    = tempkelvin;
   norm = 1.0 / planck(T,clamp(planckpeak(T),CMF_WLSTART,CMF_WLEND));

   float  lum  = 0;
   float  n    = 0;
   vector xyz;

   if(T<345) {
      xyz = lerp({3.982e-76,1.43797e-76,2.12914e-96},
                 {3.63784e-21,1.32305e-21,1.2667e-26}, fit(T,0,345,0,1));
   } else {
      float  wl   = CMF_WLSTART;
      vector cie;
      xyz = 0;
      for(i=0;i<CMF_NSTEPS;i++) {
         bb  = planck(T,wl);
         cie = cmf(i);
         n   += cie.y;
         cie *= bb;
         lum += cie.y;
         xyz += cie;
         wl += CMF_WLSTEP;
      }
   }
   return xyz;
}


#define PLANCK_LPA_D58  13.977    // = planckbandlogpoweravg(0,5800)
#define PLANCK_LPA_D10   6.94559  // = planckbandlogpoweravg(0,1000)
#define PLANCK_TMNORM  568.0      // unit^-2

void blackbody (
      float T;                // Temperature (K)
      int   dotm;             // enable tone mapping
      float adapt,burn;       // tone mapping: adaptation, burn
      export vector out_col;  // output: chromaticity
      export float  out_val   // output: power/intensity
   ) 
{
   vector xyz = bbspline(T);
   vector chr = xyztochroma(xyz);
   chr /= (C_PI * luma(chr));
   vector rgb = chr;
   if(dotm) {
      float k = max(1e-3,adapt);
      rgb *= 580.0 * log(1.+planckpower(k*T), 1.+planckpower(k*5800));
      rgb = tonemap(rgb,PLANCK_LPA_D10,0.18,burn) / PLANCK_TMNORM;
   } else {
      rgb *= planckpower(T) * 1e-6;
   }
   out_col = chr;
   out_val = luma(rgb) / luma(chr);
}

   
#endif // End pyro_planck_h



